# suppress inspection "UnusedProperty" for whole file
# The line above makes sure IntelliJ doesn't give a warning "Unused Property" in this file.

#######################################################
###                     DATABASE                    ###
#######################################################
# Change database properties based on your use case. Supported databases include:
# H2 (default), MariaDB, MySQL, MS_SQL_Server, PostgreSQL


# Link structure: jdbc: (h2 / mariadb / mysql / sqlserver / postgresql) :// (LINK:PORT/DATABASE_NAME)
# Example: spring.datasource.url = jdbc:mariadb://some-server-or-ip:3306/your_database
spring.datasource.url=jdbc:mariadb://janas.lt:3306/blog_db
# Username to connect to the database
spring.datasource.username=blog_user
# Password to connect to the database
spring.datasource.password=bloguser123!@#
# org.h2.Driver / org.mariadb.jdbc.Driver / com.mysql.cj.jdbc.Driver / com.microsoft.sqlserver.jdbc.SQLServerDriver / org.postgresql.Driver
spring.datasource.driverClassName=org.mariadb.jdbc.Driver
# H2Dialect, MariaDBDialect, MySQL5InnoDBDialect, SQLServerDialect, PostgreSQLDialect
spring.jpa.hibernate.dialect=org.hibernate.dialect.MariaDBDialect


# "create-drop" will erase and regenerate your database tables on each reboot/startup, "update" will update existing tables without erasing data
spring.jpa.hibernate.ddl-auto=update
# Enable all queries to show up in your console
spring.jpa.show-sql=true
# If above option is true, this option formats shown queries to be more readable
spring.jpa.hibernate.properties.hibernate.format_sql=true


#spring.servlet.multipart.max-file-size=10MB
#spring.servlet.multipart.max-request-size=10MB




#######################################################
###                     SECURITY                    ###
#######################################################

### JWT Authentication Token ###

# Signs the authentication token with this value. Change this value to something preferably random.
security.jwt.secret=McQfTjWnZr4u7x!A%D*G-JaNdRgUkXp2s5v8y/B?E(H+MbPeShVmYq3t6w9z$C&F

# Sets expiration time for authentication token
# 1000ms = 1s... * 60 = 1m (60,000ms)... * 60 = 1h (3,600,000ms)... * 24 = 24 Hours (86,400,000 ms)
security.jwt.expiration-ms=86400000

# Name for a Cookie that stores the JWT token on client side.
security.jwt.cookie-name=ChangeThisValue

# Additional security step. This will set jwt token's Issuer value.
security.jwt.issuer=testValue

# Additional JWT token claim. This adds another layer to your token.
# claim-key name is recommended to be short
security.jwt.claim.key=key
security.jwt.claim.value=value


### SSL / HTTPS Config ###

### Required for HTTPS traffic instead of HTTP ###
#server.ssl.key-store=/var/www/irenteye.com/springboot.p12
#server.ssl.key-store-password=password
#server.ssl.key-store-type=PKCS12
#server.ssl.key-alias=springboot
#server.ssl.key-password=password
#server.ssl.enabled=true
#server.port=8443
server.port=8080


spring.devtools.add-properties=false
spring.jpa.open-in-view=false